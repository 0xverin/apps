"use strict";(("undefined"!=typeof self?self:this).webpackChunk_polkadot_apps=("undefined"!=typeof self?self:this).webpackChunk_polkadot_apps||[]).push([[8717],{83867:(e,n,o)=>{o.r(n),o.d(n,{AddChainError:()=>t.iA,AlreadyDestroyedError:()=>t.A_,CrashError:()=>t.LX,JsonRpcDisabledError:()=>t.BU,MalformedJsonRpcError:()=>t.Ps,QueueFullError:()=>t.t_,start:()=>l});var t=o(36753),s=o(9954),a=o(53214),i=o(33654),r=function(e,n,o,t){return new(o||(o=Promise))((function(s,a){function i(e){try{l(t.next(e))}catch(e){a(e)}}function r(e){try{l(t.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?s(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(i,r)}l((t=t.apply(e,n||[])).next())}))};function l(e){return e=e||{},(0,t.BL)(e,{trustedBase64DecodeAndZlibInflate:e=>Promise.resolve((0,i.rr)((0,a.xl)(e))),registerShouldPeriodicallyYield:e=>{const n=()=>e("visible"===document.visibilityState);return document.addEventListener("visibilitychange",n),["visible"===document.visibilityState,()=>{document.removeEventListener("visibilitychange",n)}]},performanceNow:()=>performance.now(),getRandomValues:e=>{const n=globalThis.crypto;if(!n)throw new Error("randomness not available");n.getRandomValues(e)},connect:n=>function(e,n,o,t,i){const l=e.address.match(/^\/(ip4|ip6|dns4|dns6|dns)\/(.*?)\/tcp\/(.*?)\/(ws|wss|tls\/ws)$/),d=e.address.match(/^\/(ip4|ip6)\/(.*?)\/udp\/(.*?)\/webrtc\/certhash\/(.*?)$/);if(null!=l){let a;const i="ws"==l[4]?"ws":"wss";if("ws"==i&&n||"ws"==i&&"localhost"!=l[2]&&"127.0.0.1"!=l[2]&&o||"wss"==i&&t)throw new s.hY("Connection type not allowed");const r="ip6"==l[1]?i+"://["+l[2]+"]:"+l[3]:i+"://"+l[2]+":"+l[3];return a=new WebSocket(r),a.binaryType="arraybuffer",a.onopen=()=>{e.onOpen({type:"single-stream",handshake:"multistream-select-noise-yamux"})},a.onclose=n=>{const o="Error code "+n.code+(n.reason?": "+n.reason:"");e.onConnectionReset(o)},a.onmessage=n=>{e.onMessage(new Uint8Array(n.data))},{reset:()=>{a.onopen=null,a.onclose=null,a.onmessage=null,a.onerror=null,a.close()},send:e=>{a.send(e)},openOutSubstream:()=>{throw new Error("Wrong connection type")}}}if(null!=d){const n=d[3];if(i||"0"===n)throw new s.hY("Connection type not allowed");const o="ip4"==d[1]?"4":"6",t=d[2],l=d[4],u=(0,a.wV)(l),p=c(u);let f;const h=new Map;let m,w;const b=()=>{if(!f)return console.assert(0===h.size&&!m,"substreams exist while pc is undef"),void(f=null);f.onconnectionstatechange=null,f.onnegotiationneeded=null,f.ondatachannel=null;for(const e of Array.from(h.values()))e.onopen=null,e.onerror=null,e.onclose=null,e.onmessage=null;h.clear(),m&&(m.onopen=null,m.onerror=null,m.onclose=null,m.onmessage=null),m=void 0,f.close()},g=(n,o)=>{const t=n.id;n.binaryType="arraybuffer";let s=!1;n.onopen=()=>{console.assert(!s,"substream opened twice"),s=!0,"first-outbound"===o?(console.assert(0===h.size,"dataChannels not empty when opening"),console.assert(m===n,"handshake substream mismatch"),e.onOpen({type:"multi-stream",handshake:"webrtc",localTlsCertificateMultihash:w,remoteTlsCertificateMultihash:u})):(console.assert("outbound"!==o||!m,"handshakeDataChannel still defined"),e.onStreamOpened(t,o))},n.onerror=n.onclose=o=>{m!==n||s?m===n?(m.onopen=null,m.onerror=null,m.onclose=null,m.onmessage=null,m=void 0):s?e.onStreamReset(t):(b(),e.onConnectionReset("data channel failed to open")):(b(),e.onConnectionReset("handshake data channel failed to open"))},n.onmessage=n=>{e.onMessage(new Uint8Array(n.data),t)},"first-outbound"!==o?h.set(t,n):m=n};return RTCPeerConnection.generateCertificate({name:"ECDSA",namedCurve:"P-256",hash:"SHA-256"}).then((s=>r(this,void 0,void 0,(function*(){if(null===f)return;let a;if(f=new RTCPeerConnection({certificates:[s]}),s.getFingerprints){for(const{algorithm:e,value:n}of s.getFingerprints())if("sha-256"===e){a=n;break}}else{const e=(yield f.createOffer()).sdp.match(/a(\s*)=(\s*)fingerprint:(\s*)(sha|SHA)-256(\s*)(([a-fA-F0-9]{2}(:)*){32})/);e&&(a=e[6])}void 0!==a?(w=new Uint8Array(34),w.set([18,32],0),w.set(a.split(":").map((e=>parseInt(e,16))),2),f.onconnectionstatechange=n=>{"closed"!=f.connectionState&&"disconnected"!=f.connectionState&&"failed"!=f.connectionState||(b(),e.onConnectionReset("WebRTC state transitioned to "+f.connectionState))},f.onnegotiationneeded=e=>r(this,void 0,void 0,(function*(){var e;let s=(yield f.createOffer()).sdp;null===s.match(/^m=application(\s+)(\d+)(\s+)UDP\/DTLS\/SCTP(\s+)webrtc-datachannel$/m)&&console.error("Local offer doesn't contain UDP data channel. WebRTC connections will likely fail. Please report this issue.");const a=null===(e=s.match(/^a=ice-pwd:(.+)$/m))||void 0===e?void 0:e.at(1);void 0===a&&console.error("Failed to set ufrag to pwd. WebRTC connections will likely fail. Please report this issue.");const i="libp2p+webrtc+v1/"+a;s=s.replace(/^a=ice-ufrag.*$/m,"a=ice-ufrag:"+i),s=s.replace(/^a=ice-pwd.*$/m,"a=ice-pwd:"+i),yield f.setLocalDescription({type:"offer",sdp:s});const r=Array.from(p).map((e=>("0"+e.toString(16)).slice(-2).toUpperCase())).join(":"),l="v=0\no=- 0 0 IN IP"+o+" "+t+"\ns=-\nt=0 0\na=ice-lite\nm=application "+n+" UDP/DTLS/SCTP webrtc-datachannel\nc=IN IP"+o+" "+t+"\na=mid:0\na=ice-options:ice2\na=ice-ufrag:"+i+"\na=ice-pwd:"+i+"\na=fingerprint:sha-256 "+r+"\na=setup:passive\na=sctp-port:5000\na=max-message-size:16384\na=candidate:1 1 UDP 1 "+t+" "+n+" typ host\n";yield f.setRemoteDescription({type:"answer",sdp:l})})),f.ondatachannel=({channel:e})=>{g(e,"inbound")},g(f.createDataChannel("",{id:0,negotiated:!0}),"first-outbound")):e.onConnectionReset("Failed to obtain the browser certificate fingerprint")})))),{reset:e=>{if(void 0===e)b();else{const n=h.get(e);n.onopen=null,n.onerror=null,n.onclose=null,n.onmessage=null,n.close(),h.delete(e)}},send:(e,n)=>{h.get(n).send(e)},openOutSubstream:()=>{m?(()=>{r(this,void 0,void 0,(function*(){m&&(e.onStreamOpened(m.id,"outbound"),h.set(m.id,m),m=void 0)}))})():g(f.createDataChannel(""),"outbound")}}}throw new s.hY("Unrecognized multiaddr format")}(n,(null==e?void 0:e.forbidWs)||!1,(null==e?void 0:e.forbidNonLocalWs)||!1,(null==e?void 0:e.forbidWss)||!1,(null==e?void 0:e.forbidWebRtc)||!1)})}const c=e=>{if(34!=e.length||18!=e[0]||32!=e[1])throw new Error("Certificate multihash is not SHA-256");return new Uint8Array(e.slice(2))}}}]);